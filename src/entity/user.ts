import { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn, BaseEntity } from "typeorm";

//* this is a decorator
//* this entitity basically creates a db table and you can create a table name within the entity
@Entity("Users")
//* this BaseEntity extends methods like save, findOne, and more this is used in the resolvers in order to do mutations, queries, subs, and more
export class User extends BaseEntity {

  //* This allows a column "id" to be a primary key and autogenerated
  //* instead of doing @Column({ primary: true, autoGenerated: true })
  @PrimaryGeneratedColumn()
  id!: number;

  //* creates a column called firstName that is required
  //* {nullable: false} is simply a second layer of protection just in case the '!' doesnt work and make the firstName required
  @Column({ nullable: false })
  firstName!: string;

  //* creates a column called lastName that is required
  //* {nullable: false} is simply a second layer of protection just in case the '!' doesnt work and make the lastName required
  @Column({ nullable: false })
  lastName!: string;

  //* creates a column called age that is required
  //* {nullable: false} is simply a second layer of protection just in case the '!' doesnt work and make the age required
  @Column({ nullable: false })
  age!: number;

  //* creates a column called createdDate that is required
  //* {nullable: false} is simply a second layer of protection just in case the '!' doesnt work and make the createdDate required
  @CreateDateColumn({ nullable: false })
  createdDate!: Date;

  //* creates a column called updatedDate that is required
  //* {nullable: false} is simply a second layer of protection just in case the '!' doesnt work and make the updatedDate required
  @UpdateDateColumn({ nullable: false })
  updatedDate!: Date;
}
